<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lgy.shallweshare.users.dao.UsersDao">
	<select id="getUserInfo" parameterType="hashmap"
		resultType="com.lgy.shallweshare.users.dto.UsersDto">
		select 
			u_id,
			u_role,
			u_login_platform,
			u_sns_id,
			u_name,
			u_nickname,
			u_birth,
			u_phoneNum,
			u_gender,
			u_email,
			u_bank_account,
			u_authentication,
			u_temperature,
			u_created
		from users
		where u_id = #{u_id,jdbcType = VARCHAR}
	</select>
	<update id="editProfile" parameterType="hashmap">
		update users set 
			u_name = #{u_name},
			u_nickname = #{u_nickname},
			u_phoneNum = #{u_phoneNum},
			u_email = #{u_email},
			u_bank_account = #{u_bank_account}
		where u_id= #{u_id, jdbcType = VARCHAR}
	</update>
	
	<!-- 로그인 -->
    <select id="signIn" resultType="com.lgy.shallweshare.users.dto.UsersDto" parameterType="hashmap">
        SELECT *
        FROM users
        WHERE u_sns_id = #{u_sns_id,jdbcType=VARCHAR}
        AND u_pwd = #{u_pwd,jdbcType=VARCHAR}
    </select>
    
    
<!-- 회원가입 -->
    <insert id="signUp" parameterType="hashmap">
    
<!--     시퀀스 사용 -->
<!--     	insert into users1(u_id, u_role,u_login_platform,u_sns_id,u_pwd, u_name -->
<!--                     ,u_nickname,u_phoneNum,u_gender,u_email,u_bank_account -->
<!--                     ,u_authentication,u_temperature,u_created)  -->
<!-- 		values(users_seq.NEXTVAL,'USER', null,#{u_sns_id},#{u_pwd},#{u_name} -->
<!--       		 	,#{u_nickname},#{u_phoneNum},#{u_gender},#{u_email} -->
<!--      		 	,#{u_bank_account},'T','30',sysdate) -->
     		 	
     		 	
<!--    마지막으로 입력된 일련번호 +1  => max+1에서 중복 가능성 조금 더 최소화 -->
<!--      	insert into users(u_id, u_role,u_login_platform,u_sns_id,u_pwd, u_name -->
<!--                     ,u_nickname,u_phoneNum,u_gender,u_email,u_bank_account -->
<!--                     ,u_authentication,u_temperature,u_created)  -->
<!-- 		values(NVL((SELECT u.u_id FROM users u WHERE ROWNUM = 1), 0) + 1,'USER', null,#{u_sns_id},#{u_pwd},#{u_name} -->
<!--       		 	,#{u_nickname},#{u_phoneNum},#{u_gender},#{u_email} -->
<!--      		 	,#{u_bank_account},'T','30',sysdate) -->

     	insert into users(u_id, u_role,u_login_platform,u_sns_id,u_pwd, u_name
                    ,u_nickname,u_phoneNum,u_gender,u_email,u_bank_account
                    ,u_authentication,u_temperature,u_created) 
		values((SELECT NVL(MAX(u_id), 0) + 1 FROM users),'USER', 'NORMAL',#{u_sns_id},#{u_pwd},#{u_name}
      		 	,#{u_nickname},#{u_phoneNum},#{u_gender},#{u_email}
     		 	,#{u_bank_account},'T','30',sysdate)
     		</insert>
     		
     		
     		 	
     	 	
    <!--아이디 중복 검사 -->
    <select id="idChk" resultType="integer" parameterType="String">
    	select count(*)
    	from users
    	where u_sns_id= #{u_sns_id,jdbcType=VARCHAR}
    </select> 	
    
    <!-- 유저 정보 찾기 -->
    <select id="userSearch" resultType="com.lgy.shallweshare.users.dto.UsersDto" parameterType="hashmap">
        SELECT *
        FROM users
        WHERE u_id=#{u_id,jdbcType=VARCHAR}
    </select>
    
    
<!--     회원 수정 -->
    <update id="userModify" parameterType="hashmap">
        UPDATE users
        SET
        u_pwd = #{u_pwd},
        u_nickname =  #{u_nickname},
        u_phoneNum = #{u_phoneNum},
        u_email  = #{u_email},
        u_bank_account = #{u_bank_account}
        WHERE u_id = #{u_id,jdbcType=VARCHAR}
    </update>


<!-- 	회원탈퇴 -->
    <delete id="userDel" parameterType="hashmap">
        DELETE FROM users
        WHERE u_id = #{u_id,jdbcType=VARCHAR}
    </delete>
    
    
<!--      	kakao -->

     	<!-- 정보 찾기 -->
	<select id="findKakao" resultType="com.lgy.shallweshare.users.dto.KakaoDTO" parameterType="hashmap">

		select * from users 
		where u_nickname=#{nickname,jdbcType=VARCHAR} 
			and u_email=#{email,jdbcType=VARCHAR} 
			and u_gender=#{gender,jdbcType=VARCHAR} 
<!-- 			and access_Token=#{access_Token,jdbcType=VARCHAR}  -->
			
<!-- 					select * from users  -->
<!-- 		where access_Token=#{access_Token,jdbcType=VARCHAR}  -->
			
		
			
			
	</select>
        
<!-- 카카오 회원가입 -->
    <insert id="kakaoInsert" parameterType="hashmap">
     		 	insert into users(u_id, u_role,u_login_platform
     		 						,u_nickname,u_email,u_gender
<!--      		 						,u_nickname,u_email -->
     		 						,u_authentication,u_temperature,u_created,access_Token)
     		 	values((SELECT NVL(MAX(u_id), 0) + 1 FROM users),'USER', 'KAKAO'
     		 			,#{nickname,jdbcType=VARCHAR},#{email,jdbcType=VARCHAR},#{gender}
<!--      		 			,#{nickname},#{email} -->
     		 			,'T','30',sysdate,#{access_Token,jdbcType=VARCHAR})
     </insert> 	 	
     
<!-- 카카오 추가 회원가입 (업데이트로 값 넣어줌) -->
    <update id="kakaoSignUp" parameterType="hashmap">
        UPDATE users
        SET
        u_name = #{u_name},
        u_phoneNum =  #{u_phoneNum},
        u_bank_account = #{u_bank_account}
        WHERE u_id = #{u_id,jdbcType=VARCHAR}
    </update>
    
<!--     카카오 회원 수정 -->
    <update id="kakaoUserModify" parameterType="hashmap">
<!--         UPDATE users -->
<!--         SET -->
<!--         u_name = #{u_name}, -->
<!--         u_phoneNum =  #{u_phoneNum}, -->
<!--         u_bank_account = #{u_bank_account}, -->
<!--         u_nickname=#{u_nickname}, -->
<!--         u_email=#{u_email},  -->
<!--         u_gender=#{u_gender} -->
<!--         WHERE u_id = #{u_id} -->


<!--         UPDATE users -->
<!--         SET -->
<!--         u_name = #{u_name}, -->
<!--         u_phoneNum = #{u_phoneNum}, -->
<!--         u_bank_account = #{u_bank_account} -->
<!--         WHERE u_id = #{u_id} -->
        
        UPDATE users
        SET
        u_name = #{u_name},
        u_phoneNum = #{u_phoneNum},
        u_bank_account = #{u_bank_account}
        WHERE u_nickname=#{u_nickname} and u_email=#{u_email} and u_gender=#{u_gender} and u_id = #{u_id}

    </update>
    
        <!-- 카카오 유저 정보 찾기 -->
    <select id="kakaoUserSearch" resultType="com.lgy.shallweshare.users.dto.KakaoDTO" parameterType="hashmap">
        SELECT *
        FROM users
        WHERE u_id=#{u_id,jdbcType=VARCHAR}
    </select>
    
<!--             UPDATE users -->
<!--         SET -->
<!--         u_pwd = #{u_pwd}, -->
<!--         u_nickname =  #{u_nickname}, -->
<!--         u_phoneNum = #{u_phoneNum}, -->
<!--         u_email  = #{u_email}, -->
<!--         u_bank_account = #{u_bank_account} -->
<!--         WHERE u_id = #{u_id} -->
	
<!-- 	토큰 찾기 -->
	    <select id="getAccess_Token" resultType="com.lgy.shallweshare.users.dto.UsersDto" parameterType="hashmap">
        SELECT access_Token
        FROM users
        WHERE u_id=#{u_id,jdbcType=VARCHAR}
    </select>
</mapper>